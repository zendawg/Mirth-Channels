<channel>
  <id>e1fbfa82-3a7b-424f-b103-2fc9dfcb9ca1</id>
  <name>stereoscopy-image-reader</name>
  <description>Checks for the arrival of Kowa camera images and moves them to an appropriate patient-centric directory.

All images will be contained in the same directory for a given patient. Note that this channel checks less often than is required; Text files should be processed first (see the data reader).</description>
  <enabled>true</enabled>
  <version>2.2.1.5861</version>
  <lastModified>
    <time>1363860674972</time>
    <timezone>Europe/London</timezone>
  </lastModified>
  <revision>24</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">File Reader</property>
      <property name="FTPAnonymous">1</property>
      <property name="autoDelete">0</property>
      <property name="binary">1</property>
      <property name="charsetEncoding">DEFAULT_ENCODING</property>
      <property name="checkFileAge">1</property>
      <property name="fileAge">10000</property>
      <property name="fileFilter">ID*.jpg</property>
      <property name="host">_OE_STEREO_TEXT_IN_</property>
      <property name="ignoreDot">1</property>
      <property name="moveToDirectory"></property>
      <property name="moveToErrorDirectory">_OE_STEREO_IMAGES_ERR_</property>
      <property name="moveToPattern"></property>
      <property name="passive">1</property>
      <property name="password">anonymous</property>
      <property name="pollingFrequency">10000</property>
      <property name="pollingType">interval</property>
      <property name="processBatchFiles">0</property>
      <property name="regex">0</property>
      <property name="scheme">file</property>
      <property name="secure">1</property>
      <property name="sortAttribute">date</property>
      <property name="timeout">10000</property>
      <property name="username">anonymous</property>
      <property name="validateConnections">1</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <script>tmp[&apos;originalFilename&apos;] = validate(msg[&apos;originalFilename&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;originalFilename&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;originalFilename&apos;].toString()</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <script>tmp[&apos;pid&apos;] = validate(msg[&apos;pid&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;pid&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;pid&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <script>tmp[&apos;photoId&apos;] = validate(msg[&apos;photoId&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;photoId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;photoId&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>PATIENT_DIR</name>
          <script>var mapping;try { mapping = channelMap.put(&apos;PATIENT_DIR&apos;, msg[&apos;pid&apos;].toString()); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}globalChannelMap.put(&apos;PATIENT_DIR&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>PATIENT_DIR</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>channelMap.put(&apos;PATIENT_DIR&apos;, msg[&apos;pid&apos;].toString())</string>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>globalChannel</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">PHN0ZXJlb0ltYWdlPgogIDxvcmlnaW5hbEZpbGVuYW1lPnZhbHVlMzwvb3JpZ2luYWxGaWxlbmFt
ZT4KICA8cGlkPnBpZDwvcGlkPgogIDxwaG90b0lkPnBob3RvSWQ8L3Bob3RvSWQ+Cjwvc3RlcmVv
SW1hZ2U+</inboundTemplate>
      <outboundTemplate encoding="base64">PHN0ZXJlb0ltYWdlRmlsZT4KICA8b3JpZ2luYWxGaWxlbmFtZT52YWx1ZTM8L29yaWdpbmFsRmls
ZW5hbWU+CiAgPHBpZD52YWx1ZTI8L3BpZD4KICA8cGhvdG9JZD52YWx1ZTE8L3Bob3RvSWQ+Cjwv
c3RlcmVvSW1hZ2VGaWxlPg==</outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">true</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.2.1.5861</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Destination 1</name>
      <properties>
        <property name="DataType">Database Writer</property>
        <property name="URL">_OE_DB_URL_</property>
        <property name="driver">_OE_DB_DRIVER_</property>
        <property name="host">query</property>
        <property name="password">_OE_DB_PASSWORD_</property>
        <property name="query"></property>
        <property name="script">var f = new java.io.File(new java.io.File(globalMap.get(&apos;OE_STEREO_IMAGES_IN&apos;)), $(&apos;originalFilename&apos;));
var fileId = getFileId(f);

var dbConn = getDbConnection();

var data = new XML(messageObject.getTransformedData());
var photo_id = data[&apos;photoId&apos;]
var pid = data[&apos;pid&apos;]
// var filename = data[&apos;originalFilename&apos;]&#xd;
var sql = &quot;INSERT INTO &quot; + globalMap.get(&apos;OE_DB_SERVICE_BUS_DISC_FILES&apos;) + &quot; (file_id, photo_id, pid)&quot;
    + &quot; VALUES (&quot; + fileId
	+ &quot;,&quot; + photo_id
    + &quot;, &apos;&quot; + pid + &quot;&apos;)&quot;
try {
	var result = dbConn.executeUpdate(sql);
	log(channelId, &quot;info&quot;, &apos;Successfully executed SQL: &apos; + sql);
} catch (err) {
	log(channelId, &apos;error&apos;, &apos;Failed to execute insert for statement \&apos;&apos; + sql + &apos;\&apos;: &apos; + err);
} finally {
	dbConn.close();
}</property>
        <property name="useScript">1</property>
        <property name="username">_OE_DB_USER_</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <script>tmp[&apos;originalFilename&apos;] = validate(msg[&apos;originalFilename&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data class="map">
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;originalFilename&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;originalFilename&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <script>tmp[&apos;pid&apos;] = validate(msg[&apos;pid&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data class="map">
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;pid&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;pid&apos;].toString()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <script>tmp[&apos;photoId&apos;] = validate(msg[&apos;photoId&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data class="map">
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;photoId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;photoId&apos;].toString()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PHN0ZXJlb0ltYWdlPgogIDxvcmlnaW5hbEZpbGVuYW1lPnZhbHVlMzwvb3JpZ2luYWxGaWxlbmFt
ZT4KICA8cGlkPnBpZDwvcGlkPgogIDxwaG90b0lkPnBob3RvSWQ8L3Bob3RvSWQ+Cjwvc3RlcmVv
SW1hZ2U+</inboundTemplate>
        <outboundTemplate encoding="base64">PHN0ZXJlb0ltYWdlRmlsZT4KICA8b3JpZ2luYWxGaWxlbmFtZT52YWx1ZTM8L29yaWdpbmFsRmls
ZW5hbWU+CiAgPHBpZD52YWx1ZTI8L3BpZD4KICA8cGhvdG9JZD52YWx1ZTE8L3Bob3RvSWQ+Cjwv
c3RlcmVvSW1hZ2VGaWxlPg==</outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
    <connector>
      <name>Destination 2</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">23953081-77dc-42d8-8de7-6c9478b46e3d</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps/>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
var filename = muleContext.getMessage().getProperty(&quot;originalFilename&quot;);

var f = new java.io.File(new java.io.File(globalMap.get(&apos;OE_STEREO_IMAGES_IN&apos;)), filename);
var size = f.length();

var fileId = addFile(f);

fileAudit(&apos;i&apos;, &apos;f&apos;, globalMap.get(&apos;OE_STEREO_IMAGES_IN&apos;), filename, null, null, f.length(), -1);

var pid = filename.substring(2, filename.lastIndexOf(&apos;-&apos;))
var tmpPhotoId = &quot;&quot; + filename.split(&apos;-&apos;)[1]
var photoId = &quot;&quot; + tmpPhotoId.substring(0, tmpPhotoId.lastIndexOf(&apos;.&apos;))
log(channelId, &quot;info&quot;, &apos;Extracting file data: PID=&apos; + pid + &quot; photo ID=&quot; + photoId + &quot; filename=&quot; + filename);

var xml = &quot;&lt;stereoImage&gt;&quot;
xml = xml + &quot;&lt;originalFilename&gt;&quot; + filename
xml = xml + &quot;&lt;/originalFilename&gt;&quot;
xml = xml + &quot;&lt;pid&gt;&quot; + pid
xml = xml + &quot;&lt;/pid&gt;&quot;
xml = xml + &quot;&lt;photoId&gt;&quot; + photoId
xml = xml + &quot;&lt;/photoId&gt;&lt;/stereoImage&gt;&quot;

return xml;</preprocessingScript>
  <postprocessingScript>
var filename = channelMap.get(&quot;originalFilename&quot;);

var f = new java.io.File(new java.io.File(globalMap.get(&apos;OE_STEREO_IMAGES_IN&apos;)), filename);
var fout = new java.io.File(new java.io.File(globalMap.get(&apos;OE_STEREO_IMAGES_OUT&apos;)), filename);

/*
chicken vs. egg - need to audit now, BUT it&apos;s the 
*/

fileLocationChange(&apos;move&apos;, f.getAbsolutePath(), fout.getAbsolutePath(), globalMap.get(&apos;OE_STEREO_TEXT_ERR&apos;));

return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>