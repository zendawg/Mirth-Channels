<channel>
  <id>558e170a-57bb-4797-936c-1f0c14594a15</id>
  <name>vfa-image-dir-encoder</name>
  <description>Takes an image file and creates an encoded directory based on the patient&apos;s CRN, as well as encoding the image name.

All encoding is done using MD5 hash.</description>
  <enabled>true</enabled>
  <version>2.2.1.5861</version>
  <lastModified>
    <time>1363890483819</time>
    <timezone>Europe/London</timezone>
  </lastModified>
  <revision>37</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">File Reader</property>
      <property name="FTPAnonymous">1</property>
      <property name="autoDelete">0</property>
      <property name="binary">0</property>
      <property name="charsetEncoding">DEFAULT_ENCODING</property>
      <property name="checkFileAge">1</property>
      <property name="fileAge">20000</property>
      <property name="fileFilter">*.tif</property>
      <property name="host">_OE_VFA_IMAGES_OUT_</property>
      <property name="ignoreDot">1</property>
      <property name="moveToDirectory"></property>
      <property name="moveToErrorDirectory">_OE_VFA_IMAGES_ERR_</property>
      <property name="moveToPattern"></property>
      <property name="passive">1</property>
      <property name="password">anonymous</property>
      <property name="pollingFrequency">1000</property>
      <property name="pollingType">interval</property>
      <property name="processBatchFiles">0</property>
      <property name="regex">0</property>
      <property name="scheme">file</property>
      <property name="secure">1</property>
      <property name="sortAttribute">date</property>
      <property name="timeout">10000</property>
      <property name="username">anonymous</property>
      <property name="validateConnections">1</property>
    </properties>
    <transformer>
      <steps/>
      <inboundTemplate encoding="base64">PHZmYUltYWdlPgogIDxvcmlnaW5hbEZpbGVuYW1lPnZhbHVlMzwvb3JpZ2luYWxGaWxlbmFtZT4K
PC92ZmFJbWFnZT4=</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">true</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.2.1.5861</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Destination 1</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">// TODO this entire section needs splitting up into separate tasks

// image scale width value:
var width = globalMap.get(&apos;OE_IMAGE_VFA_SCALE_WIDTH&apos;);
// image scale height value:
var height = globalMap.get(&apos;OE_IMAGE_VFA_SCALE_HEIGHT&apos;);

// Important, only sita standard tests will undergo image manipulation:
var testStrategy = null;

var data = new XML(messageObject.getTransformedData())
log(channelId, &apos;info&apos;, &apos;data=&apos; + data);
log(channelId, &apos;info&apos;, &apos;before transformation=&apos; + messageObject.getTransformedData());
//var filename = data[&apos;originalFilename&apos;];
var filename = $(&apos;originalFilename&apos;);
if (filename != null &amp;&amp; filename != &apos;undefined&apos; &amp;&amp; filename.length() &gt; 0) {
	log(channelId, &apos;info&apos;, &apos;file name is &apos; + filename);
	var pid = null;
	var dbConn = getDbConnection();

	var sql = &quot;SELECT pid from &quot; + globalMap.get(&apos;OE_DB_SERVICE_BUS_VFA_XML_INFO&apos;) + &quot; where file_name = &apos;&quot; + filename + &quot;&apos; ORDER BY id DESC&quot;;
	// first, insert this new data in to the DB:
	try {
		var result = dbConn.executeCachedQuery(sql);
		result.next();
		pid = result.getString(1);
		log(channelId, &apos;info&apos;, &apos;Succesfully got pid &apos; + pid + &apos; from query: &apos; + sql);
	} catch (err) {
		log(channelId, &apos;error&apos;, &apos;Failed to execute query for statement \&apos;&apos; + sql + &apos;\&apos;: &apos; + err);
		log(channelId, &quot;error&quot;, &quot;Filename for image was NULL; (given as &apos;&quot; +
			$(&apos;originalFilename&apos;) + &quot;&apos; in the destination mapping; moving to holding directory.&quot;);
		fileLocationChange(&apos;move&apos;, globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;) + &quot;/&quot; + $(&apos;originalFilename&apos;),
			globalMap.get(&apos;OE_VFA_IMAGES_HOLDING&apos;) + &quot;/&quot; + $(&apos;originalFilename&apos;),
			globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));
		return;
	} finally {
		dbConn.close();
	}

	if (pid != &apos;null&apos; &amp;&amp; pid.length() &gt; 0) {
		dbConn = getDbConnection();

		// The directory should be located in a directory named after the test strategy;
		// also, only deal with SITA-Standard tests:
		sql = &quot;SELECT test_strategy from &quot; + globalMap.get(&apos;OE_DB_SERVICE_BUS_VFA_XML_INFO&apos;) + &quot; where file_name = &apos;&quot; + filename + &quot;&apos;&quot;;
		// first, insert this new data in to the DB:
		try {
			var result = dbConn.executeCachedQuery(sql);
			result.next();
			testStrategy = result.getString(1);
			log(channelId, &apos;info&apos;, &apos;Succesfully got test strategy &apos; + testStrategy + &apos; from query: &apos; + sql);
		} catch (err) {
			log(channelId, &apos;error&apos;, &apos;Failed to execute query for statement \&apos;&apos; + sql + &apos;\&apos;: &apos; + err);
		} finally {
			dbConn.close();
		}

		// encoding required to MD5 directory and file names:
		var encodeutils = new Packages.org.statefive.encodeutils.EncodeUtils();
		var pidEncodedDir = getPatientUniquePrefix(pid);
		// the patients directory name as an encoded MD5 value:
		var encodedDir = pidEncodedDir + &apos;-&apos; + encodeutils.md5(pid);
		// the name of the encoded file:
		var encodedFile = encodeutils.md5(filename);
		// this is where (encoded) patient directories are created:
		var imagesDir = globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;);
		// this is where the thumbnail of the image will be created:
		var mkDestDir = new java.io.File(imagesDir  + &quot;/&quot; + testStrategy + &quot;/&quot; + encodedDir);
		// where cut-down images will go:
		var mkDestDirThumbs = new java.io.File(mkDestDir, &apos;thumbs&apos;);
		// where sub-images will go:
		var mkDestDirSubImages = new java.io.File(mkDestDir, &apos;subimages&apos;);

		try {
			// create the test directory (and all parent directories) where images will be stored:		
			router.routeMessage(&quot;file-utils&quot;, buildFileUtilMessage(
				&quot;mkdir&quot;, mkDestDir.getAbsolutePath(), null, null, null),
				false);
		} catch(err) {
			log(channelId, &apos;error&apos;, &apos;Failed to create directory: &apos; + err);
		}

		fileLocationChange(&apos;move&apos;, imagesDir + &quot;/&quot; + filename,
				mkDestDir.getAbsolutePath() + &quot;/&quot; + encodedFile + &quot;.tif&quot;,
				globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));

		if (testStrategy != null &amp;&amp; testStrategy.toLowerCase() != &apos;sita-standard&apos;) {
			log(channelId, &apos;info&apos;, &apos;Test strategy &apos; + testStrategy + &apos; is not SITA-Standard; no image manipulation to be done for this test type.&apos;);
			return;
		}
		try {
			// create the thumbs directory (and all parent directories) where the thumbnail will be stored:		
			router.routeMessage(&quot;file-utils&quot;, buildFileUtilMessage(
				&quot;mkdir&quot;, mkDestDirSubImages.getAbsolutePath(), null, null, null),
				false);
			// create the thumbs directory (and all parent directories) where the thumbnail will be stored:		
			router.routeMessage(&quot;file-utils&quot;, buildFileUtilMessage(
				&quot;mkdir&quot;, mkDestDirThumbs.getAbsolutePath(), null, null, null),
				false);
		} catch (err) {
			log(channelId, &apos;error&apos;, &apos;Failed to route message: &apos; + err)
		}
		var imageutils = null;
		try {
			imageutils = new Packages.org.statefive.imageutils.ImageUtils();
		} catch(err) {
			log(channelId, &quot;error&quot;, &quot;Failed to load java library: org.statefive.imageutils.ImageUtils&quot;);
			return;
		}
			// all TIF from here:
		var tmpFile = encodedFile;
		encodedFile = encodedFile + &quot;.tif&quot;;
		var subImage = new java.io.File(mkDestDirSubImages, encodedFile);
	
		try {
			imageutils.subImage(mkDestDir.getAbsolutePath() + &quot;/&quot; + encodedFile,
					1302, 520, 925, 834, mkDestDirSubImages.getAbsolutePath() + &quot;/&quot; + encodedFile);
			try {
				var src = new java.io.File(mkDestDir, encodedFile);
				fileAudit(&apos;t&apos;, &apos;f&apos;, mkDestDir.getAbsolutePath(), encodedFile,
						mkDestDirSubImages.getAbsolutePath(), encodedFile, src.length(), subImage.length());
				log(channelId, &quot;info&quot;, &quot;Image &quot;
						+ mkDestDir.getAbsolutePath() + &quot;/&quot; + encodedFile + &quot; cut down to : &quot;
						+ mkDestDirSubImages.getAbsolutePath() + &quot;/&quot; + encodedFile);
			} catch(err) {
				log(channelId, &quot;error&quot;, err);
			}
		} catch(err) {
			log(channelId, &quot;error&quot;, &quot;Library invocation failure: &quot; + err);
		}
		encodedFile = tmpFile;
		scaleImage(mkDestDirSubImages.getAbsolutePath() + &quot;/&quot; + encodedFile + &quot;.tif&quot;,
					mkDestDirThumbs.getAbsolutePath() + &quot;/&quot; + encodedFile + &quot;.jpg&quot;, width, height);	
	}
} else {
	log(channelId, &quot;error&quot;, &quot;Filename for image was NULL; (given as &apos;&quot; +
		$(&apos;originalFilename&apos;) + &quot;&apos; in the destination mapping; moving to holding directory.&quot;);
	fileLocationChange(&apos;move&apos;, globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;) + &quot;/&quot; + $(&apos;originalFilename&apos;),
			globalMap.get(&apos;OE_VFA_IMAGES_HOLDING&apos;) + &quot;/&quot; + $(&apos;originalFilename&apos;),
			globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));
}</property>
      </properties>
      <transformer>
        <steps/>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>