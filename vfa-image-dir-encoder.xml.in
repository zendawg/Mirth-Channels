<channel>
  <id>558e170a-57bb-4797-936c-1f0c14594a15</id>
  <name>vfa-image-dir-encoder</name>
  <description>Takes an image file and creates an encoded directory based on the patient&apos;s CRN, as well as encoding the image name.

All encoding is done using MD5 hash.</description>
  <enabled>true</enabled>
  <version>2.2.1.5861</version>
  <lastModified>
    <time>1371757583112</time>
    <timezone>Europe/London</timezone>
  </lastModified>
  <revision>708</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">File Reader</property>
      <property name="FTPAnonymous">1</property>
      <property name="autoDelete">0</property>
      <property name="binary">0</property>
      <property name="charsetEncoding">DEFAULT_ENCODING</property>
      <property name="checkFileAge">1</property>
      <property name="fileAge">5000</property>
      <property name="fileFilter">*.tif</property>
      <property name="host">_OE_VFA_IMAGES_OUT_</property>
      <property name="ignoreDot">1</property>
      <property name="moveToDirectory"></property>
      <property name="moveToErrorDirectory">_OE_VFA_IMAGES_ERR_</property>
      <property name="moveToPattern"></property>
      <property name="passive">1</property>
      <property name="password">anonymous</property>
      <property name="pollingFrequency">1000</property>
      <property name="pollingType">interval</property>
      <property name="processBatchFiles">0</property>
      <property name="regex">0</property>
      <property name="scheme">file</property>
      <property name="secure">1</property>
      <property name="sortAttribute">date</property>
      <property name="timeout">10000</property>
      <property name="username">anonymous</property>
      <property name="validateConnections">1</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name></name>
          <script>tmp[&apos;originalFilename&apos;] = validate(msg[&apos;originalFilename&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;originalFilename&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;originalFilename&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">PHZmYUltYWdlPgogIDxvcmlnaW5hbEZpbGVuYW1lPnZhbHVlMzwvb3JpZ2luYWxGaWxlbmFtZT4K
PC92ZmFJbWFnZT4=</inboundTemplate>
      <outboundTemplate encoding="base64">PHZmYUltYWdlPgogIDxvcmlnaW5hbEZpbGVuYW1lPnZhbHVlMzwvb3JpZ2luYWxGaWxlbmFtZT4K
PC92ZmFJbWFnZT4=</outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">true</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.2.1.5861</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Destination 1</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">// TODO this entire section needs splitting up into separate tasks

// image scale width value:
var width = globalMap.get(&apos;OE_IMAGE_VFA_SCALE_WIDTH&apos;);
// image scale height value:
var height = globalMap.get(&apos;OE_IMAGE_VFA_SCALE_HEIGHT&apos;);

// Important, only sita standard tests will undergo image manipulation:
var testStrategy = null;

//var data = new XML(messageObject.getTransformedData())
//var filename = data[&apos;originalFilename&apos;];
filename=$(&apos;originalFilename&apos;)

log(channelId, null, &apos;xxx&apos;, filename);
//var assetId = data[&apos;assetId&apos;]
if (filename != null &amp;&amp; filename != &apos;undefined&apos; &amp;&amp; filename.length() &gt; 0) {
	var pid = null;
	var objHumphreyXmlId = null;
	var tifFileId = null;

	// need to find the associated XML file that contains our meta-data:
	var ack = routeModel(&apos;search&apos;, buildRoutableModel(null, &apos;FsScanHumphreyXml&apos;, [&apos;file_name&apos;], [filename]));
	if (ack.getMessage() != null &amp;&amp; ack.getStatus() == &apos;SUCCESS&apos;) {
		var searchResults = JSON.parse(ack.getMessage());
		if (searchResults.length &gt; 0) {
			objHumphreyXml = searchResults[0];
			// the search results will contain the PID of the patient for the image:
			pid = objHumphreyXml.pid;
			objHumphreyXmlId = objHumphreyXml.id;
			// ... and the test strategy:
			testStrategy = objHumphreyXml.test_strategy;
		}
	} else {
		// throw an error and move the image to the holding directory - for some reason, the XML file did not exist:
		fileLocationChange(&apos;move&apos;, globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;) + &quot;/&quot; + filename,
			globalMap.get(&apos;OE_VFA_IMAGES_HOLDING&apos;) + &quot;/&quot; + filename,
			globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));
		return;
	}
	// otherwise,
	if (typeof pid === &apos;undefined&apos;) {
		// throw an error and move the image to the holding directory - for some reason, the PID is missing:
		log(channelId, null, &apos;error&apos;, &apos;PID was not defined in the associated XML file &apos; + objHumphreyXml.file_name + &apos;, ID:&apos; + id);
		fileLocationChange(&apos;move&apos;, globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;) + &quot;/&quot; + filename,
			globalMap.get(&apos;OE_VFA_IMAGES_HOLDING&apos;) + &quot;/&quot; + filename,
			globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));
		// TODO mark the XML file as invalid? Or deleted?
		return;
	} else if (typeof testStrategy === &apos;undefined&apos;) {
		// throw an error and move the image to the holding directory - for some reason, the test strategy is missing:
		log(channelId, null, &apos;error&apos;, &apos;Test Strategy was not defined in the associated XML file &apos; + objHumphreyXml.file_name + &apos;, ID:&apos; + id);
		fileLocationChange(&apos;move&apos;, globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;) + &quot;/&quot; + filename,
			globalMap.get(&apos;OE_VFA_IMAGES_HOLDING&apos;) + &quot;/&quot; + filename,
			globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));
		// TODO mark the XML file as invalid? Or deleted?
		return;
	} else {
		// patients that do not (or do) exist use a separate uid for their directory name:
		// (this caters for new systems importing old data)
		var encodedDir = getPatientUniquePrefix(pid);
		// this is where (encoded) patient directories are created:
		var imagesDir = globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;);
		// this is where the thumbnail of the image will be created:
		var mkDestDir = new java.io.File(imagesDir  + &quot;/&quot; + testStrategy + &quot;/&quot; + encodedDir);
		// where sub-images will go - in this case the main image in the TIF:
		var mkDestDirThumbs = new java.io.File(mkDestDir, &apos;thumbs&apos;);
	
		try {
			// create the test directory (and all parent directories) where images will be stored:		
			router.routeMessage(&quot;file-utils&quot;, buildFileUtilMessage(
				&quot;mkdir&quot;, mkDestDirThumbs.getAbsolutePath(), null, null, null),
				false);
		} catch(err) {
			log(channelId, null, &apos;error&apos;, &apos;Failed to create directory: &apos; + err);
		}

		var orig = new java.io.File(mkDestDir, filename);

		fileLocationChange(&apos;move&apos;, imagesDir + &quot;/&quot; + filename,
				mkDestDir.getAbsolutePath() + &quot;/&quot; + filename,
				globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));


		var createdDate = DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		var ackImg = routeModel(&apos;create&apos;, buildRoutableModel(null, &apos;FsScanHumphreyImage&apos;, [&apos;file_id&apos;, &apos;created_date&apos;], [getFileId(orig), createdDate]));
		var humphreyImage = JSON.parse(ackImg.getMessage());

		tifFileId = getFileId(orig);
		var ack = routeModel(&apos;update&apos;, buildRoutableModel(objHumphreyXmlId, &apos;FsScanHumphreyXml&apos;, [&apos;tif_file_id&apos;], [getFileId(orig)]));
		var ack = routeModel(&apos;update&apos;, buildRoutableModel(humphreyImage.id, &apos;FsScanHumphreyImage&apos;, [&apos;xml_id&apos;], [objHumphreyXmlId]));

		var subImage = new java.io.File(mkDestDirThumbs, filename);

		try {
			var imageutils = null;
			imageutils = new Packages._OE_JAVA_PACKAGE_.imageutils.ImageUtils();
			imageutils.createVisualFieldSubimage(mkDestDir.getAbsolutePath() + &quot;/&quot; + filename,
					1302, 520, 925, 834, width, height, mkDestDirThumbs.getAbsolutePath() + &quot;/&quot; + filename);
			var subImage = new java.io.File(mkDestDirThumbs.getAbsolutePath() + &quot;/&quot; + filename);
			var fileId = addFileWithKey(subImage, getFileId(orig));
		} catch(err) {
				log(channelId, null, &quot;error&quot;, err);
		}
	}


	// only do this if we know we&apos;ve got the patient and the humphrey XML has been bound to the image:
    if (!(typeof pid === &apos;undefined&apos;) &amp;&amp; !(typeof objHumphreyXmlId === &apos;undefined&apos;)) {
		createHumphreyImagePairEvent(pid, tifFileId, objHumphreyXmlId, testStrategy);
	}

} else {
	log(channelId, null, &quot;error&quot;, &quot;Filename for image was NULL; (given as &apos;&quot; +
		$(&apos;originalFilename&apos;) + &quot;&apos; in the destination mapping; moving to holding directory.&quot;);
	fileLocationChange(&apos;move&apos;, globalMap.get(&apos;OE_VFA_IMAGES_OUT&apos;) + &quot;/&quot; + $(&apos;originalFilename&apos;),
			globalMap.get(&apos;OE_VFA_IMAGES_HOLDING&apos;) + &quot;/&quot; + $(&apos;originalFilename&apos;),
			globalMap.get(&apos;OE_VFA_IMAGES_ERR&apos;));
}</property>
      </properties>
      <transformer>
        <steps/>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">false</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>