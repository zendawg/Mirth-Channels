<map>
  <entry>
    <string>Shutdown</string>
    <string>// This script executes once when all channels shut down from a redeploy
// You only have access to the globalMap here to persist data
return;</string>
  </entry>
  <entry>
    <string>Deploy</string>
    <string>// This script executes once when all channels start up from a redeploy
// You only have access to the globalMap here to persist data

// Note that theses scripts are intended to be used with the
// main OE installer scripts, especially for the purposes of
// substituting values used within these files.
// 
// 
// 

// image pixel width for thumbnail of stereo images:
globalMap.put(&apos;OE_IMAGE_STEREO_SCALE_WIDTH&apos;, 300);
// image pixel height for thumbnail of stereo images:
globalMap.put(&apos;OE_IMAGE_STEREO_SCALE_HEIGHT&apos;, 225);
// image pixel width for thumbnail of stereo images:
globalMap.put(&apos;OE_IMAGE_VFA_SCALE_WIDTH&apos;, 300);
// image pixel height for thumbnail of stereo images:
globalMap.put(&apos;OE_IMAGE_VFA_SCALE_HEIGHT&apos;, 306);

// DB password:
globalMap.put(&apos;OE_DB_PASSWORD&apos;, &apos;_OE_DB_PASSWORD_&apos;);
// DB user name:
globalMap.put(&apos;OE_DB_USER&apos;, &apos;_OE_DB_USER_&apos;);
// DB host name:
globalMap.put(&apos;OE_DB_HOST&apos;, &apos;_OE_DB_HOST_&apos;);
// DB port:
globalMap.put(&apos;OE_DB_PORT&apos;, &apos;_OE_DB_PORT_&apos;);
// DB name to connect to:
globalMap.put(&apos;OE_DB_NAME&apos;, &apos;_OE_DB_NAME_&apos;);

/* Stereoscopy related variables */
// location for picking up stereo text files:
globalMap.put(&apos;OE_STEREO_TEXT_IN&apos;, &apos;_OE_STEREO_TEXT_IN_&apos;);
// location for picking up stereo image files:
globalMap.put(&apos;OE_STEREO_IMAGES_IN&apos;, &apos;_OE_STEREO_TEXT_IN_&apos;);
// location for moving images files to (contains encoded patient directories):
globalMap.put(&apos;OE_STEREO_IMAGES_OUT&apos;, &apos;_OE_STEREO_IMAGES_OUT_&apos;);
// location for moving error images files to:
globalMap.put(&apos;OE_STEREO_IMAGES_ERR&apos;, &apos;_OE_STEREO_IMAGES_ERR_&apos;);
// location for moving text files:
globalMap.put(&apos;OE_STEREO_TEXT_OUT&apos;, &apos;_OE_STEREO_TEXT_OUT_&apos;);
// location for stereodisc error files:
globalMap.put(&apos;OE_STEREO_TEXT_ERR&apos;, &apos;_OE_STEREO_IMAGES_ERR_&apos;);

/* VFA related variables */
// location for picking up stereo image text (XML) files:
globalMap.put(&apos;OE_VFA_TEXT_IN&apos;, &apos;_OE_VFA_TEXT_IN_&apos;);
// location for picking up stereo image files:
globalMap.put(&apos;OE_VFA_IMAGES_IN&apos;, &apos;_OE_VFA_TEXT_IN_&apos;);
// location for moving images files to (contains encoded patient directories):
globalMap.put(&apos;OE_VFA_IMAGES_OUT&apos;, &apos;_OE_VFA_IMAGES_OUT_&apos;);
// location for moving error images files to:
globalMap.put(&apos;OE_VFA_IMAGES_ERR&apos;, &apos;_OE_VFA_IMAGES_ERR_&apos;);
// location for images moved to holding directory (awaiting XML file config):
globalMap.put(&apos;OE_VFA_IMAGES_HOLDING&apos;, &apos;_OE_VFA_IMAGES_HOLDING_&apos;);
// location for moving text files:
globalMap.put(&apos;OE_VFA_TEXT_OUT&apos;, &apos;_OE_VFA_TEXT_OUT_&apos;);
// location for VFA error files:
globalMap.put(&apos;OE_VFA_TEXT_ERR&apos;, &apos;_OE_VFA_IMAGES_ERR_&apos;);

/* DB-related variables */
globalMap.put(&apos;OE_DB_SERVICE_BUS_DISC_FILES&apos;, &apos;_OE_DB_SERVICE_BUS_DISC_FILES_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_DISC_INFO&apos;, &apos;_OE_DB_SERVICE_BUS_DISC_INFO_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_VFA_FILES&apos;, &apos;_OE_DB_SERVICE_BUS_VFA_FILES_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_VFA_XML_INFO&apos;, &apos;_OE_DB_SERVICE_BUS_VFA_XML_INFO_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_FILE_AUDIT&apos;, &apos;_OE_DB_SERVICE_BUS_FILE_AUDIT_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_UID&apos;, &apos;_OE_DB_SERVICE_BUS_UID_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_FILE&apos;, &apos;_OE_DB_SERVICE_BUS_FILE_&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_ASSET&apos;, &apos;asset&apos;);
globalMap.put(&apos;OE_DB_SERVICE_BUS_DIRECTORY&apos;, &apos;_OE_DB_SERVICE_BUS_DIRECTORY_&apos;);

// these are file/directory ID caches to save on REST calls:
var cacheFiles = {};
var cacheFilesList = [];
globalMap.put(&apos;ID_FILE_CACHE&apos;, cacheFiles);
globalMap.put(&apos;ID_FILE_CACHE_LIST&apos;, cacheFilesList);
var cacheDirs = {};
var cacheDirsList = [];
globalMap.put(&apos;ID_DIR_CACHE&apos;, cacheDirs);
globalMap.put(&apos;ID_DIR_CACHE_LIST&apos;, cacheDirsList);

return;</string>
  </entry>
  <entry>
    <string>Preprocessor</string>
    <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
  </entry>
  <entry>
    <string>Postprocessor</string>
    <string>// This script executes once after a message has been processed
// This script applies across all channels
return;</string>
  </entry>
</map>